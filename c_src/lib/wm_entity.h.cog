
#pragma once

#include <vector>

[[[cog

  import sys

  if 'WM_ENTITY_NAME' not in globals():
    cog.error("No WM_ENTITY_NAME defined")
    sys.exit(1)

  ClassName = "Swm" + WM_ENTITY_NAME.title().replace('_', '')
  cog.msg("genareting %s code" % ClassName)

  import json, collections
  json_data=open('./priv/schema.json')
  data = json.load(json_data, object_pairs_hook=collections.OrderedDict)

  sys.path.append("./scripts")
  from autogen_helpers import *


  def out_job_defines():
    cog.outl('#define SWM_JOB_STATE_QUEUED       "Q"')
    cog.outl('#define SWM_JOB_STATE_WAITING      "W"')
    cog.outl('#define SWM_JOB_STATE_RUNNING      "R"')
    cog.outl('#define SWM_JOB_STATE_TRANSFERRING "T"')
    cog.outl('#define SWM_JOB_STATE_FINISHED     "F"')
    cog.outl('#define SWM_JOB_STATE_ERROR        "E"')
    cog.outl('#define SWM_JOB_STATE_CANCELLED    "C"')
    cog.outl()
    cog.outl()


  def transform(t):
    s = t
    defines = []
    if t.startswith('#'):
      (s, plain, ignore) = struct_param_type(s)
      defines.append(plain)
    elif '{' in t:
      pp = t[t.find('{') + 1 : t.find('}')].split(',')
      s = c_struct(pp)
    if '[' in t:
      s = t[t.find('[') + 1 : t.find(']')]
      if s in types.keys():
        s = types[s]
      (param_type, to_defines) = transform(s)
      defines.extend(to_defines)
      s = 'std::vector<' + param_type + '>'
    else:
      if s in types.keys():
        s = types[s]
    return (s, defines)


  def out_record(x,y):
    props = []
    defines = []
    need_setters = []
    for z,k in y.items():
      if k["type"] in types.keys():
        type_str = types[k["type"]]
      else:
        (type_str, to_defines) = transform(k["type"])
        defines.extend(to_defines)
      need_setters.append((z, type_str))
      props.append("  " + type_str  + " " + z + ";")

    for define in defines:
      cog.outl('#include "wm_%s.h"' % define)
    cog.outl();

    cog.outl("namespace swm {");
    cog.outl();

    cog.outl("class %s:SwmEntity {\n" % ClassName)
    cog.outl(" public:")
    out_init_ctor(x,y)
    cog.outl("")
    out_print_funs(x,y)
    out_setters(need_setters)
    cog.outl()

    cog.outl(" private:")
    cog.outl('\n'.join(props))
    cog.outl();

    cog.outl("};")


  def out_setters(need_setters):
    cog.outl()
    for (x,t) in need_setters:
      cog.outl("  void set_%s(const %s&);" % (x, t))
    cog.outl()
    for (x,t) in need_setters:
      cog.outl("  %s get_%s() const;" % (t, x))


  def out_init_ctor(x,y):
    cog.outl("  %s();" % ClassName)
    cog.outl("  %s(ETERM*);" % ClassName)


  def out_convert(x,y):
    cog.outl("int eterm_to_%s(ETERM*, int, std::vector<%s>&);" %\
             (x, ClassName))
    cog.outl("int eterm_to_%s(ETERM*, %s&);" %\
             (x, ClassName))

  def out_print_funs(x,y):
    cog.out("  virtual void print(const std::string &prefix, const char separator) const;\n")


  def generate_output():
    for e in exclude:
      del data[e]

    if WM_ENTITY_NAME in data:
      x = WM_ENTITY_NAME
      y = data[WM_ENTITY_NAME]
    else:
      cog.error("No entity '%s' found" % WM_ENTITY_NAME)
      import sys
      sys.exit(1)

    if WM_ENTITY_NAME == "job":
      out_job_defines()

    cog.outl("#include \"wm_entity.h\"");
    cog.outl("#include \"wm_entity_utils.h\"");
    out_record(x,y)
    cog.outl();

    out_convert(x,y)
    cog.outl()

    cog.outl("} // namespace swm");


  generate_output()

]]]

