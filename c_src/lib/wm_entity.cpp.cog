#include <iostream>

[[[cog

  import sys

  if 'WM_ENTITY_NAME' not in globals():
    cog.error("No WM_ENTITY_NAME defined")
    sys.exit(1)

  class_name = "Swm" + WM_ENTITY_NAME.title().replace('_', '')
  cog.msg("genareting %s code" % class_name)

  import json, collections
  json_data=open('./priv/schema.json')
  data = json.load(json_data, object_pairs_hook=collections.OrderedDict)

  sys.path.append("./scripts")
  from autogen_helpers import *


  def transform(schema_type):
    suffix = schema_type
    camel_type = suffix
    is_array = False
    is_tuple = False
    if schema_type.startswith('#'):
      (camel_type, suffix, is_tuple) = struct_param_type(suffix)
    elif '{' in schema_type and '{}' not in schema_type:
      pp = schema_type[schema_type.find('{') + 1 : schema_type.find('}')].split(',')
      suffix = 'tuple' + get_tuple_type(pp)
    if '[' in schema_type:
      suffix = schema_type[schema_type.find('[') + 1 : schema_type.find(']')]
      if suffix in type_suffix_map.keys():
        suffix = type_suffix_map[suffix]
      (tmp1, tmp2, is_tuple) = struct_param_type(suffix)
      suffix, camel_type, _, _ = transform(suffix)
      is_array = True
    else:
      if suffix in type_suffix_map.keys():
        suffix = type_suffix_map[suffix]
    return (suffix, camel_type, is_array, is_tuple)


  def get_final_type(schema_type):
    final_type = schema_type
    if schema_type.startswith('#'):
      (final_type, plain, ignore) = struct_param_type(final_type)
    elif '{' in schema_type:
      pp = schema_type[schema_type.find('{') + 1 : schema_type.find('}')].split(',')
      final_type = c_struct(pp)
    if '[' in schema_type:
      final_type = schema_type[schema_type.find('[') + 1 : schema_type.find(']')]
      if final_type in types_map.keys():
        final_type = types_map[final_type]
      param_type = get_final_type(final_type)
      final_type = 'std::vector<' + param_type + '>'
    else:
      if final_type in types_map.keys():
        final_type = types_map[final_type]
    return final_type


  def out_init_ctor(entity_name, entity_properties):
    outputs = []
    outputs.append("%s::%s() {" % (class_name, class_name))
    outputs.append("}")
    outputs.append("")

    outputs.append("%s::%s(const char* buf, int &index) {" % (class_name, class_name))
    outputs.append("  if (!buf) {")
    outputs.append(f'    std::cerr << "Could not convert ei buffer into {class_name}: null" << std::endl;')
    outputs.append("    return;")
    outputs.append("  }")
    outputs.append("")
    outputs.append("  int term_size = 0;")
    outputs.append("  if (ei_decode_tuple_header(buf, &index, &term_size)) {")
    outputs.append(f'    std::cerr << "Could not decode {class_name} header from ei buffer: ";')
    outputs.append('    ei_print_term(stdout, buf, &index);')
    outputs.append("    std::cerr << std::endl;")
    outputs.append("    return;")
    outputs.append("  }")
    outputs.append("")
    outputs.append('  if (ei_skip_term(buf, &index) < 0) {  // first atom is the term name')
    outputs.append(f'    std::cerr << "Could not skip {class_name} term first atom: ";')
    outputs.append("    ei_print_term(stderr, buf, &index);")
    outputs.append('    std::cerr << std::endl;')
    outputs.append("    return;")
    outputs.append("  }")
    outputs.append("")

    pos = 2
    includes = set()
    for prop_name, prop_meta in entity_properties.items():
      is_tuple = False
      prop_type = prop_meta["type"]
      if prop_type in type_suffix_map.keys():
        type_suffix = type_suffix_map[prop_type]
      else:
        type_suffix, camel_type, _, is_tuple = transform(prop_type)

      outputs.append(f'  if (ei_buffer_to_{type_suffix}(buf, index, this->{prop_name})) {{')
      outputs.append(f'    std::cerr << "Could not init {entity_name}::{prop_name} at pos {pos}: ";')
      outputs.append("    ei_print_term(stderr, buf, &index);")
      outputs.append('    std::cerr << std::endl;')
      outputs.append("    return;")
      outputs.append("  }")
      outputs.append("")
      pos += 1

      if is_tuple:
        includes.add(type_suffix)

    outputs.append("}")
    outputs.append("")
    return (includes, outputs)


  def out_convert_fun(entity_name):
    struct_type = entity_name.title().replace('_', '')
    cog.out("int swm::ei_buffer_to_%s(" % WM_ENTITY_NAME)
    cog.out("const char* buf, ")
    cog.out("int &index, ")
    cog.out("Swm" + struct_type + " &obj")
    cog.outl(") {")
    cog.outl("  obj = Swm%s(buf, index);" % struct_type);
    cog.outl("  return 0;");
    cog.outl("}")
    cog.outl()


  def out_init_array_fun(entity_name):
    struct_type = entity_name.title().replace('_', '')
    cog.out("int swm::ei_buffer_to_%s(" % WM_ENTITY_NAME)
    cog.out("const char *buf, ")
    cog.out("int &index, ")
    cog.out("std::vector<Swm" + struct_type + "> &array")
    cog.outl(") {")
    cog.outl("  int term_size = 0;");
    cog.outl("  int term_type = 0;");
    cog.outl("  const int parsed = ei_get_type(buf, &index, &term_type, &term_size);");
    cog.outl("  if (parsed < 0) {");
    cog.outl("    std::cerr << \"Could not get term type at position \" << index << std::endl;");
    cog.outl("    return -1;");
    cog.outl("  }");
    cog.outl()
    cog.outl("  if (term_type != ERL_LIST_EXT && term_type != ERL_NIL_EXT) {");
    cog.outl(f'      std::cerr << "Could not parse term: not a {entity_name} list at " << index << ": " << term_type << std::endl;');
    cog.outl("      return -1;");
    cog.outl("  }");
    cog.outl("  int list_size = 0;");
    cog.outl("  if (ei_decode_list_header(buf, &index, &list_size) < 0) {");
    cog.outl(f'    std::cerr << "Could not parse list for {entity_name} at position " << index << std::endl;');
    cog.outl("    return -1;");
    cog.outl("  }");
    cog.outl("  if (list_size == 0) {");
    cog.outl("    return 0;");
    cog.outl("  }");
    cog.outl()
    cog.outl("  array.reserve(list_size);");
    cog.outl("  for (int i=0; i<list_size; ++i) {");
    cog.outl("    int entry_size = 0;")
    cog.outl("    int sub_term_type = 0;")
    cog.outl("    const int parsed = ei_get_type(buf, &index, &sub_term_type, &entry_size);");
    cog.outl("    if (parsed < 0) {");
    cog.outl("      std::cerr << \"Could not get term type at position \" << index << std::endl;");
    cog.outl("      return -1;");
    cog.outl("    }");
    cog.outl("    switch (sub_term_type) {")
    cog.outl("      case ERL_SMALL_TUPLE_EXT:")
    cog.outl("      case ERL_LARGE_TUPLE_EXT:")
    cog.outl(f"        array.emplace_back(buf, index);");
    cog.outl(f"        break;");
    cog.outl("      default:")
    cog.outl(f'        std::cerr << "List element (at position " << i << ") is not a tuple" << std::endl;')
    cog.outl("    }")
    cog.outl("  }");
    cog.outl("  ei_skip_term(buf, &index);  // last element of a list is empty list");
    cog.outl()
    cog.outl("  return 0;");
    cog.outl("}")
    cog.outl()


  def out_print_funs(entity_name, entity_properties):
    cog.out("void %s::print(const std::string &prefix, const char separator) const {\n" % class_name)
    for name, prop_meta in entity_properties.items():
      _, camel_type, is_array, is_tuple = transform(prop_meta["type"])
      if is_array:
        cog.outl("  if (" + name + ".empty()) {")
        cog.outl("    std::cerr << prefix << \"" + name + ": []\" << separator;");
        cog.outl("  } else {")
        cog.outl("    std::cerr << prefix << \"" + name + "\" << \": [\";");
        cog.outl("    for (const auto &q: " + name + ") {")
        if is_tuple:
          cog.outl("      q.print(prefix, separator);")
        else:
          cog.outl("      std::cerr << q << \",\";")
        cog.outl("    }")
        cog.outl("    std::cerr << \"]\" << separator;");
        cog.outl("  }")
      else:
        if is_tuple:
          cog.outl("  " + name + ".print(prefix, separator);")
        else:
          cog.outl("    std::cerr << prefix << " + name + " << separator;")
    cog.outl("  std::cerr << std::endl;");
    cog.outl("}\n")


  def out_setters(entity_name, entity_properties):
    need_setters = []
    for prop_name, prop_meta in entity_properties.items():
      if prop_meta["type"] in types_map.keys():
        type_str = types_map[prop_meta["type"]]
      else:
        type_str = get_final_type(prop_meta["type"])
      need_setters.append((prop_name, type_str))
    cog.outl()
    for x, t in need_setters:
      operand = "" if t.endswith("*") else "&"
      cog.outl(f"void {class_name}::set_{x}(const {t} {operand}new_val) {{")
      if t.endswith("char*"):
         cog.outl("  %s = const_cast<char*>(new_val);" % x)
      else:
         cog.outl("  %s = new_val;" % x)
      cog.outl("}")
      cog.outl()
    for x, t in need_setters:
      cog.outl("%s %s::get_%s() const {" % (t, class_name, x))
      cog.outl(f"  return {x};")
      cog.outl("}")
      cog.outl()


  def generate_output():
    for e in exclude:
      del data[e]

    if WM_ENTITY_NAME in data:
      entity_name = WM_ENTITY_NAME
      entity_properties = data[WM_ENTITY_NAME]
    else:
      cog.error(f"No entity '{WM_ENTITY_NAME}' found")
      sys.exit(1)


    cog.outl('#include "wm_%s.h"' % WM_ENTITY_NAME)
    cog.outl()
    cog.outl('#include <ei.h>')
    cog.outl()

    includes, outputs = out_init_ctor(entity_name, entity_properties)
    for include in includes:
      cog.outl('#include "wm_' + include + '.h"')

    cog.outl()
    cog.outl("using namespace swm;")

    cog.outl()
    cog.outl()
    for output in outputs:
      cog.outl(output)
    out_setters(entity_name, entity_properties)
    out_init_array_fun(entity_name)
    out_convert_fun(entity_name)
    out_print_funs(entity_name, entity_properties)

  generate_output()

]]]
